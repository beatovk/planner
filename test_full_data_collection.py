#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–±–æ—Ä–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–±–∏—Ä–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import sys
from pathlib import Path
import time
import json
from collections import defaultdict

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from core.live_events import fetch_from_sources, get_available_sources

# –ó–∞–≥—Ä—É–∂–∞–µ–º sources –∏–∑ JSON —Ñ–∞–π–ª–∞
def load_sources():
    with open('data/sources.json', 'r', encoding='utf-8') as f:
        return json.load(f)

sources = load_sources()

def analyze_event_quality(event):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
    quality_score = 0
    missing_fields = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if event.get('title'):
        quality_score += 20
    else:
        missing_fields.append('title')
    
    if event.get('date'):
        quality_score += 20
    else:
        missing_fields.append('date')
    
    if event.get('url'):
        quality_score += 15
    else:
        missing_fields.append('url')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if event.get('image'):
        quality_score += 15
    else:
        missing_fields.append('image')
    
    if event.get('venue'):
        quality_score += 10
    else:
        missing_fields.append('venue')
    
    if event.get('desc'):
        quality_score += 10
    else:
        missing_fields.append('desc')
    
    if event.get('tags'):
        quality_score += 10
    else:
        missing_fields.append('tags')
    
    return quality_score, missing_fields

def test_category_data_collection(category_id, source_ids):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_id}")
    print(f"üì° –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(source_ids)}")
    print("-" * 60)
    
    start_time = time.time()
    
    try:
        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        events = fetch_from_sources(source_ids, category_id)
        elapsed = time.time() - start_time
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events)} –∑–∞ {elapsed:.2f}—Å")
        
        if not events:
            print("‚ùå –°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return {
                'category': category_id,
                'total_events': 0,
                'quality_stats': {},
                'elapsed_time': elapsed,
                'sources': source_ids
            }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        quality_scores = []
        missing_fields_count = defaultdict(int)
        tags_distribution = defaultdict(int)
        venues_distribution = defaultdict(int)
        
        for event in events:
            quality_score, missing_fields = analyze_event_quality(event)
            quality_scores.append(quality_score)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
            for field in missing_fields:
                missing_fields_count[field] += 1
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–≥–∏
            for tag in event.get('tags', []):
                tags_distribution[tag] += 1
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
            if event.get('venue'):
                venues_distribution[event['venue']] += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        avg_quality = sum(quality_scores) / len(quality_scores)
        min_quality = min(quality_scores)
        max_quality = max(quality_scores)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–æ–±—ã—Ç–∏–π
        print(f"\nüìä –ö–ê–ß–ï–°–¢–í–û –î–ê–ù–ù–´–•:")
        print(f"  –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_quality:.1f}/100")
        print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π: {min_quality}/100")
        print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: {max_quality}/100")
        
        print(f"\n‚ùå –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –ü–û–õ–Ø:")
        for field, count in sorted(missing_fields_count.items(), key=lambda x: x[1], reverse=True):
            percentage = (count / len(events)) * 100
            print(f"  {field}: {count} ({percentage:.1f}%)")
        
        print(f"\nüè∑ –¢–ï–ì–ò (—Ç–æ–ø-10):")
        for tag, count in sorted(tags_distribution.items(), key=lambda x: x[1], reverse=True)[:10]:
            print(f"  {tag}: {count}")
        
        print(f"\nüìç –ú–ï–°–¢–ê –ü–†–û–í–ï–î–ï–ù–ò–Ø (—Ç–æ–ø-10):")
        for venue, count in sorted(venues_distribution.items(), key=lambda x: x[1], reverse=True)[:10]:
            print(f"  {venue}: {count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à–∏–µ –∏ —Ö—É–¥—à–∏–µ —Å–æ–±—ã—Ç–∏—è
        best_events = sorted(events, key=lambda x: analyze_event_quality(x)[0], reverse=True)[:3]
        worst_events = sorted(events, key=lambda x: analyze_event_quality(x)[0])[:3]
        
        print(f"\nüèÜ –õ–£–ß–®–ò–ï –°–û–ë–´–¢–ò–Ø:")
        for i, event in enumerate(best_events):
            quality_score, _ = analyze_event_quality(event)
            print(f"  {i+1}. {event.get('title', 'No title')} - {quality_score}/100")
            print(f"     –î–∞—Ç–∞: {event.get('date', 'No date')}")
            print(f"     URL: {event.get('url', 'No URL')}")
            print(f"     Image: {'‚úÖ' if event.get('image') else '‚ùå'}")
            print(f"     Venue: {'‚úÖ' if event.get('venue') else '‚ùå'}")
            print(f"     Tags: {event.get('tags', [])}")
        
        print(f"\n‚ö†Ô∏è –°–û–ë–´–¢–ò–Ø –° –ù–ò–ó–ö–ò–ú –ö–ê–ß–ï–°–¢–í–û–ú:")
        for i, event in enumerate(worst_events):
            quality_score, missing = analyze_event_quality(event)
            print(f"  {i+1}. {event.get('title', 'No title')} - {quality_score}/100")
            print(f"     –ù–µ–¥–æ—Å—Ç–∞–µ—Ç: {', '.join(missing)}")
        
        return {
            'category': category_id,
            'total_events': len(events),
            'quality_stats': {
                'average': avg_quality,
                'min': min_quality,
                'max': max_quality
            },
            'missing_fields': dict(missing_fields_count),
            'tags_distribution': dict(tags_distribution),
            'venues_distribution': dict(venues_distribution),
            'elapsed_time': elapsed,
            'sources': source_ids
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {
            'category': category_id,
            'total_events': 0,
            'error': str(e),
            'sources': source_ids
        }

def test_all_categories():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –°–ë–û–†–ê –°–û–ë–´–¢–ò–ô")
    print("=" * 80)
    
    results = {}
    total_events = 0
    total_time = 0
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    for category_id, source_ids in sources.items():
        result = test_category_data_collection(category_id, source_ids)
        results[category_id] = result
        
        if 'total_events' in result:
            total_events += result['total_events']
            total_time += result.get('elapsed_time', 0)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 80)
    
    print(f"\nüéØ –í–°–ï–ì–û –°–û–ë–†–ê–ù–û –°–û–ë–´–¢–ò–ô: {total_events}")
    print(f"‚è± –û–ë–©–ï–ï –í–†–ï–ú–Ø –°–ë–û–†–ê: {total_time:.2f}—Å")
    
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
    for category_id, result in results.items():
        if 'total_events' in result and result['total_events'] > 0:
            quality = result.get('quality_stats', {}).get('average', 0)
            print(f"  {category_id}: {result['total_events']} —Å–æ–±—ã—Ç–∏–π, –∫–∞—á–µ—Å—Ç–≤–æ: {quality:.1f}/100")
        else:
            print(f"  {category_id}: 0 —Å–æ–±—ã—Ç–∏–π")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–•:")
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º –ø–æ–ª—è–º
    all_missing_fields = defaultdict(int)
    all_tags = defaultdict(int)
    all_venues = defaultdict(int)
    
    for result in results.values():
        if 'missing_fields' in result:
            for field, count in result['missing_fields'].items():
                all_missing_fields[field] += count
        
        if 'tags_distribution' in result:
            for tag, count in result['tags_distribution'].items():
                all_tags[tag] += count
        
        if 'venues_distribution' in result:
            for venue, count in result['venues_distribution'].items():
                all_venues[venue] += count
    
    print(f"\n‚ùå –û–ë–©–ò–ï –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –ü–û–õ–Ø:")
    for field, count in sorted(all_missing_fields.items(), key=lambda x: x[1], reverse=True):
        print(f"  {field}: {count}")
    
    print(f"\nüè∑ –û–ë–©–ò–ï –¢–ï–ì–ò (—Ç–æ–ø-15):")
    for tag, count in sorted(all_tags.items(), key=lambda x: x[1], reverse=True)[:15]:
        print(f"  {tag}: {count}")
    
    print(f"\nüìç –û–ë–©–ò–ï –ú–ï–°–¢–ê –ü–†–û–í–ï–î–ï–ù–ò–Ø (—Ç–æ–ø-15):")
    for venue, count in sorted(all_venues.items(), key=lambda x: x[1], reverse=True)[:15]:
        print(f"  {venue}: {count}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    output_file = "test_results_full_data.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump({
            'summary': {
                'total_events': total_events,
                'total_time': total_time,
                'categories_tested': len(results)
            },
            'results': results,
            'global_stats': {
                'missing_fields': dict(all_missing_fields),
                'tags_distribution': dict(all_tags),
                'venues_distribution': dict(all_venues)
            }
        }, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
    
    return results

def test_specific_sources():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Ö —Ä–∞–±–æ—Ç—ã"""
    print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–¢–î–ï–õ–¨–ù–´–• –ò–°–¢–û–ß–ù–ò–ö–û–í")
    print("=" * 60)
    
    available_sources = get_available_sources()
    print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(available_sources)}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –æ—Ç–¥–µ–ª—å–Ω–æ
    for source_id in available_sources:
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫: {source_id}")
        try:
            start_time = time.time()
            events = fetch_from_sources([source_id])
            elapsed = time.time() - start_time
            
            print(f"  ‚úÖ –°–æ–±—ã—Ç–∏–π: {len(events)} –∑–∞ {elapsed:.2f}—Å")
            
            if events:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
                quality_scores = []
                for event in events:
                    quality_score, _ = analyze_event_quality(event)
                    quality_scores.append(quality_score)
                
                avg_quality = sum(quality_scores) / len(quality_scores)
                print(f"  üìä –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {avg_quality:.1f}/100")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä
                best_event = max(events, key=lambda x: analyze_event_quality(x)[0])
                print(f"  üìÖ –ü—Ä–∏–º–µ—Ä: {best_event.get('title', 'No title')}")
                print(f"     –î–∞—Ç–∞: {best_event.get('date', 'No date')}")
                print(f"     Image: {'‚úÖ' if best_event.get('image') else '‚ùå'}")
                print(f"     Venue: {'‚úÖ' if best_event.get('venue') else '‚ùå'}")
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    results = test_all_categories()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    test_specific_sources()
    
    print(f"\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(results)}")
    print(f"üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π: {sum(r.get('total_events', 0) for r in results.values())}")
