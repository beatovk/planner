#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è Resident Advisor
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from tools.fetchers.base import get_html

def test_ra_detailed():
    print("üß™ –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Resident Advisor...")
    
    LIST_URL = "https://ra.co/events/thailand/bangkok"
    print(f"üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º: {LIST_URL}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    soup = get_html(LIST_URL)
    if not soup:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
        return
    
    print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—É—á–µ–Ω–∞")
    
    # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏
    all_links = soup.find_all("a", href=True)
    print(f"üìã –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {len(all_links)}")
    
    # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    event_links = soup.select("li a[href^='/events/']")
    print(f"üéµ –°—Å—ã–ª–æ–∫ –Ω–∞ —Å–æ–±—ã—Ç–∏—è: {len(event_links)}")
    
    if not event_links:
        print("‚ùå –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ —Å—Å—ã–ª–∫–∏ —Å /events/
        events_links = soup.find_all("a", href=lambda x: x and "/events/" in x)
        print(f"üîç –°—Å—ã–ª–æ–∫ —Å /events/: {len(events_links)}")
        
        if events_links:
            print("üìã –ü–µ—Ä–≤—ã–µ 5 —Å—Å—ã–ª–æ–∫ —Å /events/:")
            for i, link in enumerate(events_links[:5]):
                href = link.get("href", "")
                text = link.get_text(strip=True)[:50]
                print(f"  {i+1}. {href} - {text}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ {min(3, len(event_links))} —Å—Å—ã–ª–∫–∏:")
    
    for i, link in enumerate(event_links[:3]):
        href = link.get("href", "")
        text = link.get_text(strip=True)
        print(f"\n  {i+1}. {text}")
        print(f"     –°—Å—ã–ª–∫–∞: {href}")
        
        # –ò—â–µ–º –¥–∞—Ç—É
        time_el = link.find_previous("time")
        if time_el:
            datetime_attr = time_el.get("datetime")
            time_text = time_el.get_text(strip=True)
            print(f"     üìÖ Time —ç–ª–µ–º–µ–Ω—Ç: datetime='{datetime_attr}', text='{time_text}'")
        else:
            print("     ‚ùå Time —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ò—â–µ–º –¥–∞—Ç—É –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
            parent = link.parent
            if parent:
                time_siblings = parent.find_all("time")
                if time_siblings:
                    print(f"     üìÖ –ù–∞–π–¥–µ–Ω–æ time —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ä–æ–¥–∏—Ç–µ–ª–µ: {len(time_siblings)}")
                    for j, t in enumerate(time_siblings[:2]):
                        print(f"       {j+1}. datetime='{t.get('datetime')}', text='{t.get_text()}'")
                else:
                    print("     ‚ùå Time —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Ä–æ–¥–∏—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

if __name__ == "__main__":
    test_ra_detailed()
