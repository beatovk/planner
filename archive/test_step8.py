#!/usr/bin/env python3
"""
Step 8: FTS5 + Redis Cache + API - Demo Script
Demonstrates full-text search, caching, and API capabilities.
"""

import sys
import time
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path('.') / 'src'))

from search import create_fts5_engine
from cache import create_redis_cache_engine, CacheConfig
from api import create_places_api


def main():
    """Main demonstration function."""
    print("üöÄ Starting Step 8: FTS5 + Redis Cache + API...")
    print("=" * 60)
    
    try:
        # –¢–µ—Å—Ç 1: FTS5 Search Engine
        print("üß™ Test 1: FTS5 Search Engine...")
        test_fts5_engine()
        print()
        
        # –¢–µ—Å—Ç 2: Redis Cache Engine
        print("üß™ Test 2: Redis Cache Engine...")
        test_redis_cache_engine()
        print()
        
        # –¢–µ—Å—Ç 3: Places API
        print("üß™ Test 3: Places API...")
        test_places_api()
        print()
        
        # –¢–µ—Å—Ç 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏ –∫—ç—à–∞
        print("üß™ Test 4: Search + Cache Integration...")
        test_search_cache_integration()
        print()
        
        # –¢–µ—Å—Ç 5: API endpoints
        print("üß™ Test 5: API Endpoints...")
        test_api_endpoints()
        print()
        
        print("‚úÖ All Step 8 tests completed successfully!")
        return 0
        
    except Exception as e:
        print(f"‚ùå Error in Step 8: {e}")
        import traceback
        traceback.print_exc()
        return 1


def test_fts5_engine():
    """Test FTS5 search engine."""
    print("   Testing FTS5 search engine...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –ø–æ–∏—Å–∫–∞
        search_engine = create_fts5_engine("data/places_step8.db")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_places = [
            {
                'id': 'fts_test_1',
                'name': 'Amazing Thai Restaurant',
                'city': 'Bangkok',
                'domain': 'timeout.com',
                'url': 'https://timeout.com/restaurant/amazing-thai',
                'description': 'A fantastic Thai restaurant with authentic flavors.',
                'address': '123 Sukhumvit Soi 11, Bangkok, Thailand',
                'geo_lat': 13.7563,
                'geo_lng': 100.5018,
                'tags': ['thai', 'restaurant', 'authentic'],
                'flags': ['food_dining', 'local_experience'],
                'photos': [{'url': 'https://example.com/photo1.jpg'}],
                'image_url': 'https://example.com/main-photo.jpg',
                'quality_score': 0.9,
                'last_updated': '2025-01-15'
            },
            {
                'id': 'fts_test_2',
                'name': 'Sushi Master',
                'city': 'Bangkok',
                'domain': 'bk-magazine.com',
                'url': 'https://bk-magazine.com/restaurant/sushi-master',
                'description': 'Premium Japanese sushi restaurant.',
                'address': '456 Silom Soi 4, Bangkok, Thailand',
                'geo_lat': 13.7500,
                'geo_lng': 100.5000,
                'tags': ['japanese', 'sushi', 'premium'],
                'flags': ['food_dining', 'fine_dining'],
                'photos': [{'url': 'https://example.com/sushi1.jpg'}],
                'image_url': 'https://example.com/sushi-main.jpg',
                'quality_score': 0.85,
                'last_updated': '2025-01-10'
            },
            {
                'id': 'fts_test_3',
                'name': 'Coffee Corner',
                'city': 'Bangkok',
                'domain': 'timeout.com',
                'url': 'https://timeout.com/cafe/coffee-corner',
                'description': 'Cozy coffee shop with great atmosphere.',
                'address': '789 Thonglor Soi 10, Bangkok, Thailand',
                'geo_lat': 13.7450,
                'geo_lng': 100.4950,
                'tags': ['coffee', 'cafe', 'cozy'],
                'flags': ['food_dining', 'cafe'],
                'photos': [{'url': 'https://example.com/coffee1.jpg'}],
                'image_url': 'https://example.com/coffee-main.jpg',
                'quality_score': 0.8,
                'last_updated': '2025-01-12'
            }
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–∞ –≤ –∏–Ω–¥–µ–∫—Å
        print("     Adding test places to search index...")
        for place in test_places:
            success = search_engine.add_place(place)
            if success:
                print(f"       ‚úì Added: {place['name']}")
            else:
                print(f"       ‚úó Failed: {place['name']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        print("     Testing search functionality...")
        
        # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        results = search_engine.search_places("Thai", "Bangkok", 10)
        print(f"       Search 'Thai' in Bangkok: {len(results)} results")
        
        # –ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
        results = search_engine.search_places("authentic", "Bangkok", 10)
        print(f"       Search 'authentic' in Bangkok: {len(results)} results")
        
        # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º
        results = search_engine.search_by_flags(["food_dining"], "Bangkok", 10)
        print(f"       Search by flag 'food_dining': {len(results)} results")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = search_engine.get_recommendations("Bangkok", 5)
        print(f"       Recommendations for Bangkok: {len(recommendations)} results")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = search_engine.get_statistics()
        print(f"       Search engine stats: {stats['total_places']} total places")
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        search_engine.optimize_database()
        print("       Database optimization completed")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        search_engine.close()
        print("     ‚úì FTS5 engine test completed")
        
    except Exception as e:
        print(f"     ‚úó FTS5 engine test failed: {e}")


def test_redis_cache_engine():
    """Test Redis cache engine."""
    print("   Testing Redis cache engine...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫—ç—à–∞
        cache_config = CacheConfig(
            host="localhost",
            port=6379,
            db=0,
            default_ttl=7 * 24 * 3600,  # 7 days
            long_ttl=14 * 24 * 3600      # 14 days
        )
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –∫—ç—à–∞
        cache_engine = create_redis_cache_engine(cache_config)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not cache_engine._is_connected():
            print("     ‚ö†Ô∏è Redis not available, skipping cache tests")
            print("       To test Redis, start Redis server: redis-server")
            return
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_places = [
            {
                'id': 'cache_test_1',
                'name': 'Cached Restaurant 1',
                'city': 'Bangkok',
                'domain': 'test.com',
                'quality_score': 0.9
            },
            {
                'id': 'cache_test_2',
                'name': 'Cached Restaurant 2',
                'city': 'Bangkok',
                'domain': 'test.com',
                'quality_score': 0.85
            }
        ]
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç
        print("     Testing place caching...")
        success = cache_engine.cache_places("Bangkok", test_places, "test_flag")
        if success:
            print("       ‚úì Places cached successfully")
        else:
            print("       ‚úó Failed to cache places")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
        cached_places = cache_engine.get_cached_places("Bangkok", "test_flag")
        if cached_places:
            print(f"       ‚úì Retrieved {len(cached_places)} places from cache")
        else:
            print("       ‚úó Failed to retrieve places from cache")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        print("     Testing search result caching...")
        search_results = [
            {'id': 'search_1', 'name': 'Search Result 1'},
            {'id': 'search_2', 'name': 'Search Result 2'}
        ]
        
        success = cache_engine.cache_search_results("Bangkok", "test query", search_results, 10)
        if success:
            print("       ‚úì Search results cached successfully")
        else:
            print("       ‚úó Failed to cache search results")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –∏–∑ –∫—ç—à–∞
        cached_search = cache_engine.get_cached_search_results("Bangkok", "test query", 10)
        if cached_search:
            print(f"       ‚úì Retrieved {len(cached_search)} search results from cache")
        else:
            print("       ‚úó Failed to retrieve search results from cache")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        print("     Testing recommendations caching...")
        recommendations = [
            {'id': 'rec_1', 'name': 'Recommendation 1'},
            {'id': 'rec_2', 'name': 'Recommendation 2'}
        ]
        
        success = cache_engine.cache_recommendations("Bangkok", recommendations)
        if success:
            print("       ‚úì Recommendations cached successfully")
        else:
            print("       ‚úó Failed to cache recommendations")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ –∫—ç—à–∞
        cached_recs = cache_engine.get_cached_recommendations("Bangkok")
        if cached_recs:
            print(f"       ‚úì Retrieved {len(cached_recs)} recommendations from cache")
        else:
            print("       ‚úó Failed to retrieve recommendations from cache")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
        cache_stats = cache_engine.get_cache_statistics()
        print(f"       Cache stats: {cache_stats.get('total_cached_keys', 0)} cached keys")
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫—ç—à–∞
        cache_engine.clear_city_cache("Bangkok")
        print("       ‚úì Test cache cleared")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        cache_engine.close()
        print("     ‚úì Redis cache engine test completed")
        
    except Exception as e:
        print(f"     ‚úó Redis cache engine test failed: {e}")


def test_places_api():
    """Test Places API."""
    print("   Testing Places API...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º API
        api = create_places_api("data/places_step8.db")
        
        # –ü–æ–ª—É—á–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = api.get_app()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
        routes = []
        for route in app.routes:
            if hasattr(route, 'path'):
                routes.append({
                    'path': route.path,
                    'methods': list(route.methods) if hasattr(route, 'methods') else []
                })
        
        print(f"       ‚úì API created with {len(routes)} routes")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
        main_routes = [
            '/api/places',
            '/api/places/recommend',
            '/api/places/flags/{city}/{flag}',
            '/api/places/stats',
            '/health'
        ]
        
        for route in main_routes:
            if any(r['path'] == route for r in routes):
                print(f"         ‚úì {route}")
            else:
                print(f"         ‚úó {route} (missing)")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º API
        api.close()
        print("     ‚úì Places API test completed")
        
    except Exception as e:
        print(f"     ‚úó Places API test failed: {e}")


def test_search_cache_integration():
    """Test integration between search and cache."""
    print("   Testing search + cache integration...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–∫–∏
        search_engine = create_fts5_engine("data/places_step8_integration.db")
        
        cache_config = CacheConfig(host="localhost", port=6379, db=1)
        cache_engine = create_redis_cache_engine(cache_config)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
        if not cache_engine._is_connected():
            print("     ‚ö†Ô∏è Redis not available, skipping integration tests")
            return
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_places = [
            {
                'id': 'integration_1',
                'name': 'Integration Test Restaurant',
                'city': 'Bangkok',
                'domain': 'test.com',
                'description': 'A test restaurant for integration testing.',
                'address': '123 Integration Street, Bangkok',
                'geo_lat': 13.7563,
                'geo_lng': 100.5018,
                'tags': ['test', 'integration'],
                'flags': ['test_flag'],
                'photos': [{'url': 'https://example.com/test.jpg'}],
                'quality_score': 0.9,
                'last_updated': '2025-01-15'
            }
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ–∏—Å–∫
        for place in test_places:
            search_engine.add_place(place)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        search_results = search_engine.search_places("Integration", "Bangkok", 10)
        print(f"       Search returned {len(search_results)} results")
        
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if search_results:
            cache_success = cache_engine.cache_search_results(
                "Bangkok", "Integration", search_results, 10
            )
            print(f"       Cache operation: {'‚úì Success' if cache_success else '‚úó Failed'}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –∫—ç—à–∞
        cached_results = cache_engine.get_cached_search_results("Bangkok", "Integration", 10)
        if cached_results:
            print(f"       Cache retrieval: ‚úì Success ({len(cached_results)} results)")
        else:
            print("       Cache retrieval: ‚úó Failed")
        
        # –û—á–∏—Å—Ç–∫–∞
        cache_engine.clear_city_cache("Bangkok")
        search_engine.close()
        cache_engine.close()
        
        print("     ‚úì Search + cache integration test completed")
        
    except Exception as e:
        print(f"     ‚úó Search + cache integration test failed: {e}")


def test_api_endpoints():
    """Test API endpoints functionality."""
    print("   Testing API endpoints...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º API
        api = create_places_api("data/places_step8_api.db")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ API
        app = api.get_app()
        print("       ‚úì FastAPI application created")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º OpenAPI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        if hasattr(app, 'openapi'):
            openapi_spec = app.openapi()
            print(f"       ‚úì OpenAPI spec generated ({len(openapi_spec.get('paths', {}))} paths)")
        else:
            print("       ‚ö†Ô∏è OpenAPI spec not available")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
        routes_info = []
        for route in app.routes:
            if hasattr(route, 'path') and hasattr(route, 'methods'):
                routes_info.append({
                    'path': route.path,
                    'methods': list(route.methods),
                    'name': getattr(route, 'name', 'Unknown')
                })
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        api_routes = [r for r in routes_info if r['path'].startswith('/api/')]
        other_routes = [r for r in routes_info if not r['path'].startswith('/api/')]
        
        print(f"       API routes: {len(api_routes)}")
        print(f"       Other routes: {len(other_routes)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ API –º–∞—Ä—à—Ä—É—Ç—ã
        expected_routes = [
            '/api/places',
            '/api/places/search',
            '/api/places/recommend',
            '/api/places/flags/{city}/{flag}',
            '/api/places/stats',
            '/api/places/cache/clear/{city}',
            '/api/places/cache/optimize'
        ]
        
        for expected in expected_routes:
            found = any(r['path'] == expected for r in api_routes)
            status = "‚úì" if found else "‚úó"
            print(f"         {status} {expected}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
        health_routes = [r for r in routes_info if r['path'] == '/health']
        if health_routes:
            print("       ‚úì Health check endpoint available")
        else:
            print("       ‚úó Health check endpoint missing")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º API
        api.close()
        print("     ‚úì API endpoints test completed")
        
    except Exception as e:
        print(f"     ‚úó API endpoints test failed: {e}")


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
