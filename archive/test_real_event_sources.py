#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –≤ –ë–∞–Ω–≥–∫–æ–∫–µ
–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–∞–π—Ç—ã —Å–æ–±—ã—Ç–∏–π –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
"""

import httpx
import asyncio
from bs4 import BeautifulSoup
from datetime import datetime

async def test_event_source(name: str, url: str, description: str):
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: {name}")
    print(f"   URL: {url}")
    print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
    
    try:
        async with httpx.AsyncClient(timeout=15.0) as client:
            response = await client.get(url)
            print(f"   Status: {response.status_code}")
            print(f"   Length: {len(response.text)}")
            
            if response.status_code == 200:
                soup = BeautifulSoup(response.text, 'html.parser')
                
                # Check for event-like content
                event_indicators = [
                    "event", "events", "calendar", "schedule", "ticket", "booking",
                    "concert", "exhibition", "festival", "show", "performance"
                ]
                
                found_indicators = []
                for indicator in event_indicators:
                    if indicator in response.text.lower():
                        found_indicators.append(indicator)
                
                if found_indicators:
                    print(f"   ‚úÖ Event indicators found: {', '.join(found_indicators[:3])}")
                else:
                    print(f"   ‚ùå No event indicators found")
                
                # Check for dates
                date_patterns = [
                    r'\b\d{1,2}\s+(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\b',
                    r'\b(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s+\d{1,2}\b',
                    r'\b\d{4}-\d{2}-\d{2}\b',
                    r'\b(?:Today|Tomorrow|This weekend|Next week)\b'
                ]
                
                import re
                dates_found = []
                for pattern in date_patterns:
                    matches = re.findall(pattern, response.text, re.IGNORECASE)
                    if matches:
                        dates_found.extend(matches[:2])  # First 2 matches
                
                if dates_found:
                    print(f"   üìÖ Dates found: {', '.join(set(dates_found))}")
                else:
                    print(f"   ‚ùå No dates found")
                
                # Check for JavaScript rendering
                if "loading" in response.text.lower():
                    print(f"   ‚ö†Ô∏è Loading indicators - might be JS-rendered")
                    
                if "react" in response.text.lower() or "vue" in response.text.lower():
                    print(f"   ‚ö†Ô∏è JavaScript framework detected")
                    
            else:
                print(f"   ‚ùå HTTP {response.status_code}")
                
    except Exception as e:
        print(f"   ‚ùå Error: {e}")

async def test_all_sources():
    print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤ –ë–∞–Ω–≥–∫–æ–∫–µ")
    
    sources = [
        {
            "name": "Eventbrite Bangkok",
            "url": "https://www.eventbrite.com/d/thailand--bangkok/events/",
            "description": "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å–æ–±—ã—Ç–∏–π"
        },
        {
            "name": "Ticketmelon",
            "url": "https://www.ticketmelon.com/",
            "description": "–¢–∞–π—Å–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –±–∏–ª–µ—Ç–æ–≤"
        },
        {
            "name": "Resident Advisor Bangkok",
            "url": "https://ra.co/events/th/bangkok",
            "description": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –º—É–∑—ã–∫–∞ –∏ –∫–ª—É–±–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è"
        },
        {
            "name": "Bangkok Art and Culture Centre",
            "url": "https://bacc.or.th/",
            "description": "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç BACC"
        },
        {
            "name": "River City Bangkok",
            "url": "https://rivercitybangkok.com/",
            "description": "–¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä —Å –≥–∞–ª–µ—Ä–µ—è–º–∏"
        },
        {
            "name": "Bangkok Post Events",
            "url": "https://www.bangkokpost.com/events",
            "description": "–°–æ–±—ã—Ç–∏—è –æ—Ç Bangkok Post"
        }
    ]
    
    for source in sources:
        await test_event_source(source["name"], source["url"], source["description"])
        await asyncio.sleep(1)  # Be nice to servers

if __name__ == "__main__":
    asyncio.run(test_all_sources())
