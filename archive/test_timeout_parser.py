#!/usr/bin/env python3
"""
Test Time Out Bangkok Parser
Test the existing parser to see what's happening
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º tools –≤ Python path
sys.path.insert(0, str(Path('.') / 'tools'))

from fetchers.timeout_bkk import fetch as fetch_timeout_bkk, get_timeout_html
from fetchers.base import get_html


def main():
    """Test the Time Out Bangkok parser."""
    print("üß™ Testing Time Out Bangkok Parser...")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ HTML
    print("üì° Test 1: Testing basic HTML fetching...")
    test_basic_html()
    print()
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
    print("üîç Test 2: Testing parser...")
    test_parser()
    print()
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö URL
    print("üåê Test 3: Testing specific URLs...")
    test_specific_urls()
    print()


def test_basic_html():
    """Test basic HTML fetching."""
    test_urls = [
        "https://www.timeout.com/bangkok",
        "https://www.timeout.com/bangkok/things-to-do",
        "https://www.timeout.com/bangkok/food-and-drink"
    ]
    
    for url in test_urls:
        print(f"   Testing: {url}")
        
        # –¢–µ—Å—Ç 1: get_timeout_html (—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
        try:
            soup = get_timeout_html(url)
            if soup:
                title = soup.find('title')
                title_text = title.get_text() if title else "No title"
                print(f"     ‚úì get_timeout_html: Success (Title: {title_text[:50]}...)")
            else:
                print(f"     ‚úó get_timeout_html: Failed")
        except Exception as e:
            print(f"     ‚úó get_timeout_html: Error - {e}")
        
        # –¢–µ—Å—Ç 2: get_html (–±–∞–∑–æ–≤—ã–π)
        try:
            soup = get_html(url)
            if soup:
                title = soup.find('title')
                title_text = title.get_text() if title else "No title"
                print(f"     ‚úì get_html: Success (Title: {title_text[:50]}...)")
            else:
                print(f"     ‚úó get_html: Failed")
        except Exception as e:
            print(f"     ‚úó get_html: Error - {e}")
        
        print()


def test_parser():
    """Test the parser function."""
    print("   Testing parser with category: food")
    
    try:
        places = fetch_timeout_bkk(cat_id="food")
        if places:
            print(f"     ‚úì Parser success: {len(places)} places")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –º–µ—Å—Ç–∞
            for i, place in enumerate(places[:3]):
                print(f"       {i+1}. {place.get('title', 'No title')}")
                print(f"          URL: {place.get('url', 'No URL')}")
                print(f"          Venue: {place.get('venue', 'No venue')}")
                print(f"          Image: {'Yes' if place.get('image') else 'No'}")
                print()
        else:
            print("     ‚ö†Ô∏è Parser returned no places")
            
    except Exception as e:
        print(f"     ‚úó Parser error: {e}")


def test_specific_urls():
    """Test specific URLs that should work."""
    specific_urls = [
        "https://www.timeout.com/bangkok/things-to-do",
        "https://www.timeout.com/bangkok/attractions",
        "https://www.timeout.com/bangkok/restaurants"
    ]
    
    for url in specific_urls:
        print(f"   Testing: {url}")
        
        try:
            soup = get_timeout_html(url)
            if soup:
                # –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
                cards = soup.select(".card, .event-card, .listing-card, article, .article-card, .feature-card")
                print(f"     ‚úì Found {len(cards)} potential cards")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–∞—Ä—Ç–æ—á–∫–∏
                for i, card in enumerate(cards[:3]):
                    title_el = card.select_one("h1, h2, h3, .title, .card-title, .article-title")
                    title = title_el.get_text(strip=True) if title_el else "No title"
                    print(f"       {i+1}. {title[:50]}...")
                    
                    link_el = card.select_one("a")
                    if link_el:
                        href = link_el.get("href", "")
                        print(f"          Link: {href[:50]}...")
                
            else:
                print(f"     ‚úó Failed to get HTML")
                
        except Exception as e:
            print(f"     ‚úó Error: {e}")
        
        print()


if __name__ == "__main__":
    main()
