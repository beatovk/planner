#!/usr/bin/env python3
"""
Test script for Step 1: Place Contract + Table + CRUD operations.
"""

import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from models.place import Place, PlaceCreate, PriceLevel
from services.places_service import create_places_service

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def test_place_creation():
    """Test place creation and validation."""
    print("üß™ Testing Place model creation...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    place_data = PlaceCreate(
        source="test_source",
        source_url="https://example.com/test",
        name="Test Restaurant",
        description="A wonderful test restaurant in Bangkok",
        city="bangkok",
        area="Sukhumvit",
        flags=["food_dining", "restaurant"],
        tags=["thai", "local"],
        price_level=PriceLevel.MODERATE,
        cuisine="Thai",
        atmosphere="casual"
    )
    
    print(f"‚úÖ Place data created: {place_data.name}")
    print(f"   Source: {place_data.source}")
    print(f"   Area: {place_data.area}")
    print(f"   Flags: {place_data.flags}")
    print(f"   Price: {place_data.price_level}")
    
    return place_data


def test_place_model():
    """Test Place model with full data."""
    print("\nüß™ Testing Place model...")
    
    # –°–æ–∑–¥–∞–µ–º Place –æ–±—ä–µ–∫—Ç
    place = Place(
        id="test_001",
        source="test_source",
        source_url="https://example.com/test",
        name="Test Restaurant",
        description="A wonderful test restaurant in Bangkok with authentic Thai cuisine",
        city="bangkok",
        area="Sukhumvit",
        address="123 Sukhumvit Road, Bangkok",
        lat=13.7563,
        lon=100.5018,
        flags=["food_dining", "restaurant"],
        tags=["thai", "local", "authentic"],
        price_level=PriceLevel.MODERATE,
        cuisine="Thai",
        atmosphere="casual",
        image_url="https://example.com/image.jpg",
        popularity=0.8,
        quality_score=0.9
    )
    
    print(f"‚úÖ Place model created: {place.name}")
    print(f"   ID: {place.id}")
    print(f"   Identity Key: {place.get_identity_key()}")
    print(f"   Search Text: {place.get_search_text()[:100]}...")
    print(f"   Quality Score: {place.quality_score}")
    
    return place


def test_database_operations():
    """Test database operations."""
    print("\nüß™ Testing database operations...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
        service = create_places_service()
        print("‚úÖ Places service created")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –º–µ—Å—Ç–æ
        place_data = PlaceCreate(
            source="test_source",
            source_url="https://example.com/test",
            name="Test Restaurant",
            description="A wonderful test restaurant in Bangkok",
            city="bangkok",
            area="Sukhumvit",
            flags=["food_dining", "restaurant"],
            tags=["thai", "local"],
            price_level=PriceLevel.MODERATE,
            cuisine="Thai",
            atmosphere="casual"
        )
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Å—Ç–æ –≤ –ë–î
        created_place = service.create_place(place_data)
        if created_place:
            print(f"‚úÖ Place created in database: {created_place.id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–æ –ø–æ ID
            retrieved_place = service.get_place(created_place.id)
            if retrieved_place:
                print(f"‚úÖ Place retrieved from database: {retrieved_place.name}")
                print(f"   Description: {retrieved_place.description}")
                print(f"   Flags: {retrieved_place.flags}")
            else:
                print("‚ùå Failed to retrieve place")
            
            # –ü–æ–∏—Å–∫ –ø–æ —Ñ–ª–∞–≥–∞–º
            places_by_flags = service.get_places_by_flags(["food_dining"], limit=10)
            print(f"‚úÖ Found {len(places_by_flags)} places with food_dining flag")
            
            # –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–π–æ–Ω—É
            places_by_area = service.get_places_by_area("Sukhumvit", limit=10)
            print(f"‚úÖ Found {len(places_by_area)} places in Sukhumvit area")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = service.get_places_stats()
            print(f"‚úÖ Database stats: {stats.get('total_places', 0)} total places")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –º–µ—Å—Ç–æ
            if service.delete_place(created_place.id):
                print(f"‚úÖ Test place deleted: {created_place.id}")
            else:
                print("‚ùå Failed to delete test place")
            
        else:
            print("‚ùå Failed to create place in database")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
        service.close()
        print("‚úÖ Places service closed")
        
    except Exception as e:
        print(f"‚ùå Error testing database operations: {e}")
        logger.error(f"Database test error: {e}", exc_info=True)


def test_search_functionality():
    """Test search functionality."""
    print("\nüß™ Testing search functionality...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
        service = create_places_service()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–µ—Å—Ç
        test_places = [
            PlaceCreate(
                source="test_source",
                source_url="https://example.com/place1",
                name="Thai Delight Restaurant",
                description="Authentic Thai cuisine in Sukhumvit",
                city="bangkok",
                area="Sukhumvit",
                flags=["food_dining", "thai_cuisine"],
                tags=["authentic", "local"],
                price_level=PriceLevel.AFFORDABLE
            ),
            PlaceCreate(
                source="test_source",
                source_url="https://example.com/place2",
                name="Sukhumvit Art Gallery",
                description="Contemporary art gallery in Sukhumvit",
                city="bangkok",
                area="Sukhumvit",
                flags=["art_exhibits", "culture"],
                tags=["contemporary", "art"],
                price_level=PriceLevel.BUDGET
            ),
            PlaceCreate(
                source="test_source",
                source_url="https://example.com/place3",
                name="Rooftop Skybar",
                description="Luxury rooftop bar with city views",
                city="bangkok",
                area="Silom",
                flags=["bars", "rooftop", "luxury"],
                tags=["rooftop", "views", "cocktails"],
                price_level=PriceLevel.EXPENSIVE
            )
        ]
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Å—Ç–∞ –≤ –ë–î
        created_places = service.create_places(test_places)
        print(f"‚úÖ Created {len(created_places)} test places")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        print("\nüîç Testing search functionality...")
        
        # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
        search_results = service.search_places_simple(query="Thai", limit=10)
        print(f"   Text search 'Thai': {len(search_results)} results")
        
        # –ü–æ–∏—Å–∫ –ø–æ —Ñ–ª–∞–≥–∞–º
        food_results = service.search_places_simple(flags=["food_dining"], limit=10)
        print(f"   Flag search 'food_dining': {len(food_results)} results")
        
        # –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–π–æ–Ω—É
        sukhumvit_results = service.search_places_simple(area="Sukhumvit", limit=10)
        print(f"   Area search 'Sukhumvit': {len(sukhumvit_results)} results")
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫
        combined_results = service.search_places_simple(
            query="restaurant",
            flags=["food_dining"],
            area="Sukhumvit",
            limit=10
        )
        print(f"   Combined search: {len(combined_results)} results")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ—Å—Ç–∞
        popular_places = service.get_popular_places(limit=5)
        print(f"   Popular places: {len(popular_places)} results")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–∞ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_places = service.get_high_quality_places(limit=5)
        print(f"   High quality places: {len(quality_places)} results")
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        for place in created_places:
            service.delete_place(place.id)
        print(f"‚úÖ Cleaned up {len(created_places)} test places")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
        service.close()
        
    except Exception as e:
        print(f"‚ùå Error testing search functionality: {e}")
        logger.error(f"Search test error: {e}", exc_info=True)


def main():
    """Main test function."""
    print("üöÄ Starting Step 1 tests...")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞
        test_place_creation()
        
        # –¢–µ—Å—Ç 2: –ú–æ–¥–µ–ª—å –º–µ—Å—Ç–∞
        test_place_model()
        
        # –¢–µ—Å—Ç 3: –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        test_database_operations()
        
        # –¢–µ—Å—Ç 4: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞
        test_search_functionality()
        
        print("\n" + "=" * 50)
        print("‚úÖ All tests completed successfully!")
        print("\nüéØ What we've accomplished:")
        print("   ‚Ä¢ Pydantic Place model with validation")
        print("   ‚Ä¢ SQLite database with FTS5 search")
        print("   ‚Ä¢ Full CRUD operations")
        print("   ‚Ä¢ Advanced search with filters")
        print("   ‚Ä¢ Quality scoring system")
        print("   ‚Ä¢ Statistics and reporting")
        
    except Exception as e:
        print(f"\n‚ùå Test failed: {e}")
        logger.error(f"Test failure: {e}", exc_info=True)
        return 1
    
    return 0


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
