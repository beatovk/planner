from __future__ import annotations
from typing import Dict, List, Optional
import time
import re
import random
from datetime import datetime, timedelta
from .base import normalize_event, parse_date_range

ROOT = "https://bk.asia-city.com"

def get_bk_html(url: str, timeout: int = 15) -> Optional[BeautifulSoup]:
    """
    –ü—Ä–æ—Å—Ç–æ–π HTTP-—Ñ–µ—Ç—á–µ—Ä —Å –±–∞–∑–æ–≤—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –¥–ª—è BK Magazine
    """
    from bs4 import BeautifulSoup
    import requests
    
    # –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    headers = {
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
        "Accept-Language": "en-US,en;q=0.5",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Upgrade-Insecure-Requests": "1"
    }
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Å–µ—Å—Å–∏–∏
        r = requests.get(url, headers=headers, timeout=timeout)
        if r.status_code != 200:
            print(f"      ‚ùå HTTP {r.status_code} –¥–ª—è {url}")
            return None
        
        print(f"      üìä {url}: HTTP {r.status_code} ({len(r.text)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return BeautifulSoup(r.text, "lxml")
        
    except Exception as e:
        print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è {url}: {e}")
        return None

def fetch(cat_id: str = None) -> List[Dict]:
    """
    –ü—Ä–æ—Å—Ç–æ–π —Ñ–µ—Ç—á–µ—Ä –¥–ª—è BK Magazine –ø–æ —Å—Ö–µ–º–µ Time Out
    """
    start_time = time.time()
    out = []
    
    # URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ - —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    urls = [
        f"{ROOT}/things-to-do-bangkok/news",  # –ù–æ–≤–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏–π
        f"{ROOT}/restaurants/news",           # –ù–æ–≤–æ—Å—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
        f"{ROOT}/nightlife/news",             # –ù–æ–≤–æ—Å—Ç–∏ –Ω–æ—á–Ω–æ–π –∂–∏–∑–Ω–∏
        f"{ROOT}/travel/news"                 # –ù–æ–≤–æ—Å—Ç–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π
    ]
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π BK Magazine —Ñ–µ—Ç—á–µ—Ä...")
    
    for i, url in enumerate(urls):
        if len(out) >= 20:  # –ª–∏–º–∏—Ç –Ω–∞ —Ñ–µ—Ç—á–µ—Ä
            break
            
        print(f"\nüìã –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1}/{len(urls)}: {url}")
        
        soup = get_bk_html(url)
        if not soup:
            continue
            
        # –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è Drupal 7
        selectors = [
            ".node",                      # Drupal —É–∑–ª—ã
            "article",                    # –°—Ç–∞—Ç—å–∏
            ".view-content .views-row",   # Drupal Views —Ä—è–¥—ã
            ".content",                   # –ö–æ–Ω—Ç–µ–Ω—Ç
            ".main-content",              # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            ".region-content",            # –†–µ–≥–∏–æ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            ".field-content",             # –ü–æ–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            ".post",                      # –ü–æ—Å—Ç—ã
            ".event",                     # –°–æ–±—ã—Ç–∏—è
            ".listing",                   # –°–ø–∏—Å–∫–∏
            ".card",                      # –ö–∞—Ä—Ç–æ—á–∫–∏
            ".item"                       # –≠–ª–µ–º–µ–Ω—Ç—ã
        ]
        
        cards = []
        for sel in selectors:
            cards = soup.select(sel)
            if cards:
                print(f"    üéØ –ù–∞–π–¥–µ–Ω–æ {len(cards)} –∫–∞—Ä—Ç–æ—á–µ–∫ —Å '{sel}'")
                break
        
        if not cards:
            print(f"    ‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            continue
        
        # –ü–∞—Ä—Å–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏
        for j, card in enumerate(cards[:8]):  # –º–∞–∫—Å–∏–º—É–º 8 –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if len(out) >= 20:
                break
                
            try:
                print(f"    üé´ –ö–∞—Ä—Ç–æ—á–∫–∞ {j+1}/{min(len(cards), 8)}")
                
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è Drupal 7
                title_selectors = [
                    "h1", "h2", "h3", "h4",           # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                    ".node__title a",                  # Drupal –∑–∞–≥–æ–ª–æ–≤–∫–∏ —É–∑–ª–æ–≤
                    ".title", ".post-title",           # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ—Å—Ç–æ–≤
                    ".field--name-title",              # Drupal –ø–æ–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                    ".headline", ".entry-title",       # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–∞—Ç–µ–π
                    "a[href*='/']"                     # –°—Å—ã–ª–∫–∏
                ]
                
                title = None
                for sel in title_selectors:
                    title_el = card.select_one(sel)
                    if title_el:
                        title = title_el.get_text(strip=True)
                        if title and len(title) > 5:
                            break
                
                if not title:
                    print(f"      ‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    continue
                
                print(f"      üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
                
                # –°—Å—ã–ª–∫–∞
                link_selectors = [
                    "a[href*='/']",                    # –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
                    "a",                               # Fallback –Ω–∞ –ª—é–±—É—é —Å—Å—ã–ª–∫—É
                ]
                
                link_el = None
                for sel in link_selectors:
                    link_el = card.select_one(sel)
                    if link_el:
                        break
                
                if not link_el:
                    print(f"      ‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    continue
                
                event_url = link_el.get("href", "")
                if not event_url:
                    print(f"      ‚ùå URL –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    continue
                    
                if event_url.startswith("/"):
                    event_url = ROOT + event_url
                elif not event_url.startswith("http"):
                    continue
                
                # –û–ø–∏—Å–∞–Ω–∏–µ
                desc_selectors = [
                    "p",                               # –ü–∞—Ä–∞–≥—Ä–∞—Ñ—ã
                    ".summary", ".excerpt",            # –°—É–º–º–∞—Ä–∏–∏
                    ".description", ".content"         # –û–ø–∏—Å–∞–Ω–∏—è
                ]
                
                desc = None
                for sel in desc_selectors:
                    desc_el = card.select_one(sel)
                    if desc_el:
                        desc = desc_el.get_text(strip=True)[:300]
                        break
                
                # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image_selectors = [
                    "img[src*='bk.asia-city.com']",   # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è BK
                    "img"                             # Fallback –Ω–∞ –ª—é–±–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                ]
                
                image = None
                for sel in image_selectors:
                    img_el = card.select_one(sel)
                    if img_el:
                        image = img_el.get("src") or img_el.get("data-src") or img_el.get("data-lazy-src")
                        if image and image.startswith("/"):
                            image = ROOT + image
                        break
                
                # –î–∞—Ç–∞ - –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                card_text = card.get_text()
                date_patterns = [
                    r'\b\d{1,2}\s+(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s+\d{4}\b',
                    r'\b(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s+\d{1,2},?\s+\d{4}\b',
                    r'\b\d{4}-\d{2}-\d{2}\b',
                    r'\b(?:Today|Tomorrow|This weekend|Next week)\b'
                ]
                
                date_str = None
                for pattern in date_patterns:
                    match = re.search(pattern, card_text, re.IGNORECASE)
                    if match:
                        date_str = match.group()
                        break
                
                if date_str:
                    print(f"      üìÖ –î–∞—Ç–∞: {date_str}")
                else:
                    print(f"      ‚ùå –î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∫–∞–∫ fallback
                    date_str = datetime.now().strftime("%Y-%m-%d")
                
                # –ú–µ—Å—Ç–æ/—Ü–µ–Ω–∞ - –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ
                venue = "Bangkok"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                price = None
                
                # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                category_hint = cat_id if cat_id else "general"
                
                # –¢–µ–≥–∏
                tags = ["BK Magazine"]
                
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–æ–±—ã—Ç–∏–µ
                event = normalize_event(
                    title=title,
                    url=event_url,
                    desc=desc,
                    image=image,
                    date_iso=date_str,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: date -> date_iso
                    venue=venue,
                    price_min=price,
                    source="BK Magazine",  # –î–æ–±–∞–≤–ª–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
                    category_hint=category_hint,
                    tags=tags
                )
                
                if event:
                    out.append(event)
                    print(f"      ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ!")
                else:
                    print(f"      ‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
                    
            except Exception as e:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
                continue
        
        print(f"    üìä –ù–∞–π–¥–µ–Ω–æ {len(out)} —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
        if i < len(urls) - 1:
            delay = random.uniform(3, 6)
            print(f"    ‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ {delay:.1f}—Å...")
            time.sleep(delay)
    
    elapsed = time.time() - start_time
    print(f"\nüéâ BK Magazine —Ñ–µ—Ç—á–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω: {len(out)} —Å–≤–µ–∂–∏—Ö —Å–æ–±—ã—Ç–∏–π –∑–∞ {elapsed:.1f}—Å")
    
    return out
