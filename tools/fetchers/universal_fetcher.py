from __future__ import annotations
from typing import Dict, List, Optional
import time
import random
from datetime import datetime, timedelta
from .base import normalize_event

def fetch_all_sources(cat_id: str = None, max_events: int = 50) -> List[Dict]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–µ—Ç—á–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    """
    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–µ—Ç—á–µ—Ä –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {cat_id or 'all'}")
    
    all_events = []
    
    # 1. Time Out Bangkok
    print(f"\nüì∞ –ò—Å—Ç–æ—á–Ω–∏–∫ 1: Time Out Bangkok")
    try:
        from .timeout_bkk_simple import fetch as fetch_timeout
        timeout_events = fetch_timeout(cat_id, max_events)
        print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(timeout_events)} —Å–æ–±—ã—Ç–∏–π")
        all_events.extend(timeout_events)
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ Time Out: {e}")
    
    # 2. BK Magazine
    print(f"\nüì∞ –ò—Å—Ç–æ—á–Ω–∏–∫ 2: BK Magazine")
    try:
        from .bk_magazine_simple import fetch as fetch_bk
        bk_events = fetch_bk(cat_id)
        print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(bk_events)} —Å–æ–±—ã—Ç–∏–π")
        all_events.extend(bk_events)
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ BK Magazine: {e}")
    
    # 3. Zipevent (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    # print(f"\nüì∞ –ò—Å—Ç–æ—á–Ω–∏–∫ 3: Zipevent")
    # try:
    #     from .zipevent import fetch as fetch_zipevent
    #     zipevent_events = fetch_zipevent(cat_id)
    #     print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(zipevent_events)} —Å–æ–±—ã—Ç–∏–π")
    #     all_events.extend(zipevent_events)
    # except Exception as e:
    #     print(f"   ‚ùå –û—à–∏–±–∫–∞ Zipevent: {e}")
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ URL
    unique_events = []
    seen_urls = set()
    
    for event in all_events:
        url = event.get('url', '')
        if url and url not in seen_urls:
            unique_events.append(event)
            seen_urls.add(url)
    
    print(f"\nüéâ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–µ—Ç—á–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {len(all_events)}")
    print(f"üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {len(unique_events)}")
    
    return unique_events[:max_events]

def fetch_by_category(cat_id: str, max_events: int = 50) -> List[Dict]:
    """
    –§–µ—Ç—á–µ—Ä –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    return fetch_all_sources(cat_id, max_events)

def fetch_all_categories() -> Dict[str, List[Dict]]:
    """
    –§–µ—Ç—á–µ—Ä –ø–æ –≤—Å–µ–º –æ—Å–Ω–æ–≤–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    """
    categories = {
        "food": "–ï–¥–∞ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã",
        "markets_fairs": "–†—ã–Ω–∫–∏ –∏ —è—Ä–º–∞—Ä–∫–∏", 
        "live_music_gigs": "–ñ–∏–≤–∞—è –º—É–∑—ã–∫–∞",
        "jazz_blues": "–î–∂–∞–∑ –∏ –±–ª—é–∑",
        "rooftops_bars": "–†—É—Ñ—Ç–æ–ø—ã –∏ –±–∞—Ä—ã",
        "workshops": "–í–æ—Ä–∫—à–æ–ø—ã",
        "parks_walks": "–ü–∞—Ä–∫–∏ –∏ –ø—Ä–æ–≥—É–ª–∫–∏",
        "art_culture": "–ò—Å–∫—É—Å—Å—Ç–≤–æ –∏ –∫—É–ª—å—Ç—É—Ä–∞",
        "shopping": "–®–æ–ø–ø–∏–Ω–≥",
        "wellness": "–í–µ–ª–Ω–µ—Å –∏ —Å–ø–æ—Ä—Ç"
    }
    
    results = {}
    
    for cat_id, cat_name in categories.items():
        print(f"\nüéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat_name} ({cat_id})")
        try:
            events = fetch_by_category(cat_id, max_events=20)
            results[cat_id] = events
            print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            results[cat_id] = []
    
    return results
