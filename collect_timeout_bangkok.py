#!/usr/bin/env python3
"""
Collect Places from Time Out Bangkok
Uses existing timeout_bkk.py parser and processes places through integrated pipeline
"""

import sys
import time
import json
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path('.') / 'src'))
sys.path.insert(0, str(Path('.') / 'tools'))

from integration import create_places_pipeline
from cache import CacheConfig
from fetchers.timeout_bkk import fetch as fetch_timeout_bkk


def main():
    """Main function to collect places from Time Out Bangkok."""
    print("üöÄ Starting Time Out Bangkok Places Collection...")
    print("=" * 60)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
        print("üîß Initializing integrated pipeline...")
        pipeline = initialize_pipeline()
        if not pipeline:
            print("‚ùå Failed to initialize pipeline")
            return 1
        
        # –°–±–æ—Ä –º–µ—Å—Ç –∏–∑ Time Out Bangkok
        print("üì° Collecting places from Time Out Bangkok...")
        places = collect_timeout_places()
        
        if not places:
            print("‚ùå No places collected")
            return 1
        
        print(f"üìä Collected {len(places)} places from Time Out Bangkok")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç —á–µ—Ä–µ–∑ –ø–∞–π–ø–ª–∞–π–Ω
        print("üîó Processing places through pipeline...")
        results = process_places_through_pipeline(pipeline, places)
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("üìà Analyzing results...")
        analyze_results(results)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("üíæ Saving results...")
        save_results(results)
        
        # –û—á–∏—Å—Ç–∫–∞
        print("üßπ Cleaning up...")
        pipeline.close()
        
        print("‚úÖ Time Out Bangkok collection completed successfully!")
        return 0
        
    except Exception as e:
        print(f"‚ùå Error in collection: {e}")
        import traceback
        traceback.print_exc()
        return 1


def initialize_pipeline():
    """Initialize the integrated places pipeline."""
    try:
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Redis Cloud
        redis_config = CacheConfig(
            host="redis-14374.crce194.ap-seast-1-1.ec2.redns.redis-cloud.com",
            port=14374,
            password="G0vadDS1N9IaEoqQLukwSEGdAHUuPiaW",
            db=0,
            default_ttl=7 * 24 * 3600,
            long_ttl=14 * 24 * 3600,
            key_prefix="v1:places:timeout_bangkok"
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
        pipeline = create_places_pipeline(
            db_path="data/timeout_bangkok_places.db",
            redis_config=redis_config,
            min_quality_score=0.7,
            require_photos=True
        )
        
        print("   ‚úì Pipeline initialized successfully")
        return pipeline
        
    except Exception as e:
        print(f"   ‚ùå Pipeline initialization failed: {e}")
        return None


def collect_timeout_places():
    """Collect places from Time Out Bangkok using existing parser."""
    try:
        print("   üì° Fetching from Time Out Bangkok...")
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–±–æ—Ä–∞
        categories = [
            "food", "markets_fairs", "yoga_wellness",
            "live_music_gigs", "jazz_blues", "rooftops_bars",
            "workshops", "parks_walks"
        ]
        
        all_places = []
        
        for category in categories:
            print(f"     ‚Ä¢ Collecting from category: {category}")
            try:
                places = fetch_timeout_bkk(cat_id=category)
                if places:
                    print(f"       ‚úì Collected {len(places)} places from {category}")
                    all_places.extend(places)
                else:
                    print(f"       ‚ö†Ô∏è No places from {category}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                time.sleep(2)
                
            except Exception as e:
                print(f"       ‚úó Error collecting from {category}: {e}")
                continue
        
        print(f"   üìä Total places collected: {len(all_places)}")
        return all_places
        
    except Exception as e:
        print(f"   ‚ùå Collection failed: {e}")
        return []


def process_places_through_pipeline(pipeline, places):
    """Process collected places through the integrated pipeline."""
    try:
        print("   üîó Processing places through pipeline...")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–∞–π–ø–ª–∞–π–Ω–∞
        pipeline_places = convert_to_pipeline_format(places)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –ø–∞–π–ø–ª–∞–π–Ω
        results = pipeline.process_batch(pipeline_places)
        
        print(f"   ‚úì Pipeline processing completed: {len(results)} results")
        return results
        
    except Exception as e:
        print(f"   ‚ùå Pipeline processing failed: {e}")
        return []


def convert_to_pipeline_format(places):
    """Convert Time Out places to pipeline format."""
    pipeline_places = []
    
    for i, place in enumerate(places):
        try:
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            place_id = f"timeout_{i+1}_{int(time.time())}"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å –∏–∑ venue
            address = place.get('venue', '')
            if not address:
                address = 'Bangkok, Thailand'  # Default address
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–ª–∞–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–µ–≥–æ–≤
            flags = []
            category = place.get('category_hint', 'events')
            
            if category in ['food', 'restaurants']:
                flags.extend(['food_dining', 'restaurants'])
            elif category in ['bars', 'nightlife']:
                flags.extend(['nightlife', 'bars'])
            elif category in ['attractions', 'things-to-do']:
                flags.extend(['attractions', 'things_to_do'])
            elif category in ['shopping', 'markets']:
                flags.extend(['shopping', 'markets'])
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ –∏–∑ —Ç–µ–≥–æ–≤
            tags = place.get('tags', [])
            if 'Picks' in tags:
                flags.append('editor_picks')
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ç–æ
            photos = []
            image_url = place.get('image')
            if image_url:
                photos.append({
                    'url': image_url,
                    'width': 1200,
                    'height': 800
                })
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –ø–∞–π–ø–ª–∞–π–Ω–∞
            pipeline_place = {
                'id': place_id,
                'name': place.get('title', 'Unknown Place'),
                'city': 'Bangkok',
                'domain': 'timeout.com',
                'url': place.get('url', ''),
                'description': place.get('desc', ''),
                'address': address,
                'geo_lat': None,  # Time Out –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                'geo_lng': None,
                'tags': tags,
                'flags': flags,
                'phone': None,
                'email': None,
                'website': None,
                'hours': None,
                'price_level': None,
                'rating': None,
                'photos': photos,
                'image_url': image_url,
                'quality_score': 0.85,  # –ë–∞–∑–æ–≤—ã–π score –¥–ª—è Time Out
                'last_updated': datetime.now().strftime('%Y-%m-%d')
            }
            
            pipeline_places.append(pipeline_place)
            
        except Exception as e:
            print(f"     ‚ö†Ô∏è Error converting place {i}: {e}")
            continue
    
    print(f"     ‚úì Converted {len(pipeline_places)} places to pipeline format")
    return pipeline_places


def analyze_results(results):
    """Analyze pipeline processing results."""
    try:
        print("   üìà Analyzing pipeline results...")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_counts = {}
        for result in results:
            status = result.status
            status_counts[status] = status_counts.get(status, 0) + 1
        
        print("     Pipeline Results:")
        for status, count in status_counts.items():
            print(f"       ‚Ä¢ {status}: {count} places")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –º–µ—Å—Ç–∞–º
        print("     Place Details:")
        for result in results:
            if result.status == 'new':
                print(f"       ‚úì {result.name}")
                if result.quality_metrics:
                    print(f"         Quality Score: {result.quality_metrics.get_overall_score()}")
                if result.search_indexed:
                    print(f"         Search Indexed: Yes")
                if result.cache_updated:
                    print(f"         Cache Updated: Yes")
            elif result.status == 'duplicate':
                print(f"       üîÑ {result.name} (Duplicate)")
                if result.dedup_info:
                    print(f"         Duplicate of: {result.dedup_info.get('duplicate_id')}")
            elif result.status == 'rejected':
                print(f"       ‚ùå {result.name} (Rejected)")
                if result.errors:
                    print(f"         Reasons: {', '.join(result.errors)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞
        pipeline_stats = results[0].__dict__.get('_pipeline', {}).get('stats', {}) if results else {}
        if pipeline_stats:
            print("     Pipeline Statistics:")
            print(f"       Total Processed: {pipeline_stats.get('total_processed', 0)}")
            print(f"       New Places: {pipeline_stats.get('new_places', 0)}")
            print(f"       Duplicates: {pipeline_stats.get('duplicates', 0)}")
            print(f"       Rejected: {pipeline_stats.get('rejected', 0)}")
            print(f"       Errors: {pipeline_stats.get('errors', 0)}")
        
        print("   ‚úì Results analysis completed")
        
    except Exception as e:
        print(f"   ‚ùå Results analysis failed: {e}")


def save_results(results):
    """Save collection results to file."""
    try:
        print("   üíæ Saving results...")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_dir = Path('results')
        results_dir.mkdir(exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        results_file = results_dir / f'timeout_bangkok_collection_{timestamp}.json'
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        json_results = []
        for result in results:
            json_result = {
                'place_id': result.place_id,
                'name': result.name,
                'city': result.city,
                'status': result.status,
                'dedup_info': result.dedup_info,
                'quality_metrics': result.quality_metrics.get_overall_score() if result.quality_metrics else None,
                'search_indexed': result.search_indexed,
                'cache_updated': result.cache_updated,
                'processing_time': result.processing_time,
                'errors': result.errors
            }
            json_results.append(json_result)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(json_results, f, indent=2, ensure_ascii=False)
        
        print(f"     ‚úì Results saved to {results_file}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
        report_file = results_dir / f'timeout_bangkok_report_{timestamp}.txt'
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("Time Out Bangkok Collection Report\n")
            f.write("=" * 50 + "\n\n")
            f.write(f"Collection Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"Total Places: {len(results)}\n\n")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            status_counts = {}
            for result in results:
                status = result.status
                status_counts[status] = status_counts.get(status, 0) + 1
            
            f.write("Results Summary:\n")
            for status, count in status_counts.items():
                f.write(f"  {status}: {count} places\n")
            
            f.write("\nDetailed Results:\n")
            for result in results:
                f.write(f"\n{result.name} ({result.status})\n")
                if result.quality_metrics:
                    f.write(f"  Quality Score: {result.quality_metrics.get_overall_score()}\n")
                if result.errors:
                    f.write(f"  Errors: {', '.join(result.errors)}\n")
        
        print(f"     ‚úì Report saved to {report_file}")
        
    except Exception as e:
        print(f"   ‚ùå Results saving failed: {e}")


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
