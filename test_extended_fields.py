#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
"""

import requests
import json

def test_extended_fields():
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—è —Å–æ–±—ã—Ç–∏–π...")
    
    base_url = "http://localhost:8000"
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ Eventbrite
    print("\nüéØ –¢–µ—Å—Ç 1: Eventbrite —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏")
    payload = {
        "city": "Bangkok",
        "selected_category_ids": ["workshops"],
        "use_live": True,
        "date": "2025-08-22"
    }
    
    try:
        response = requests.post(f"{base_url}/api/day-cards", json=payload)
        if response.status_code == 200:
            data = response.json()
            print(f"  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {data['debug']['live_count']}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
            events_with_price = [e for e in data['items'] if e.get('price_min') is not None]
            events_with_popularity = [e for e in data['items'] if e.get('popularity') is not None]
            events_with_rating = [e for e in data['items'] if e.get('rating') is not None]
            
            print(f"  üí∞ –°–æ–±—ã—Ç–∏—è —Å —Ü–µ–Ω–æ–π: {len(events_with_price)}")
            print(f"  üë• –°–æ–±—ã—Ç–∏—è —Å –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å—é: {len(events_with_popularity)}")
            print(f"  ‚≠ê –°–æ–±—ã—Ç–∏—è —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º: {len(events_with_rating)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
            if events_with_price:
                example = events_with_price[0]
                print(f"  üìä –ü—Ä–∏–º–µ—Ä —Å–æ–±—ã—Ç–∏—è —Å —Ü–µ–Ω–æ–π: {example['title']}")
                print(f"     –¶–µ–Ω–∞: {example['price_min']} THB")
            
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    print("\nüéØ –¢–µ—Å—Ç 2: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    payload["selected_category_ids"] = ["art_exhibits", "workshops"]
    
    try:
        response = requests.post(f"{base_url}/api/day-cards", json=payload)
        if response.status_code == 200:
            data = response.json()
            print(f"  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {data['debug']['live_count']}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            sources = {}
            for event in data['items']:
                source = event['source']
                if source not in sources:
                    sources[source] = {'count': 0, 'with_price': 0, 'with_popularity': 0}
                sources[source]['count'] += 1
                if event.get('price_min') is not None:
                    sources[source]['with_price'] += 1
                if event.get('popularity') is not None:
                    sources[source]['with_popularity'] += 1
            
            print(f"  üåê –ê–Ω–∞–ª–∏–∑ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
            for source, stats in sources.items():
                print(f"     {source}: {stats['count']} —Å–æ–±—ã—Ç–∏–π, {stats['with_price']} —Å —Ü–µ–Ω–æ–π, {stats['with_popularity']} —Å –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å—é")
            
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    print("\nüéØ –¢–µ—Å—Ç 3: Week View —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏")
    week_payload = {
        "city": "Bangkok",
        "selected_category_ids": ["workshops"],
        "use_live": True,
        "mode": "week",
        "date": "2025-08-22"
    }
    
    try:
        response = requests.post(f"{base_url}/api/plan-cards", json=week_payload)
        if response.status_code == 200:
            data = response.json()
            print(f"  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {data['debug']['live_count']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è
            total_events = sum(len(day['items']) for day in data['days'])
            events_with_new_fields = 0
            
            for day in data['days']:
                for event in day['items']:
                    if any(event.get(field) is not None for field in ['popularity', 'price_min', 'rating']):
                        events_with_new_fields += 1
            
            print(f"  üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {total_events}")
            print(f"  üÜï –°–æ–±—ã—Ç–∏–π —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏: {events_with_new_fields}")
            
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    test_extended_fields()
